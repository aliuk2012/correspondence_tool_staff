FROM ministryofjustice/ruby:2.3.0

# This file generates a base image that is used to generate the image for the
# uploads container of the Correspondence Tool. We generate a base image because
# installing the libreoffice package for preview generation is very slow and
# needs to happen very rarely, if ever. Because Docker doesn't [seem to] cache
# the installation of packages, we generate a base image and then build our
# uploads image ontop of that, saving several minutes for each build.
#

# Normally we use the "onbuild" image as the base of our app images, but as this
# uploads base image isn't ready to receive a copy of the source dir yet, we use
# the non-onbuild image, copying what's done in the onbuild Dockerfile which is
# found here:
#
# https://github.com/ministryofjustice/docker-templates/blob/master/ruby/2.3.0/webapp-onbuild/Dockerfile

# add official nodejs repo
RUN curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
        echo 'deb https://deb.nodesource.com/node jessie main' > /etc/apt/sources.list.d/nodesource.list

COPY bin/codename.sh .

# add official postgresql repo
RUN curl -s https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
    sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(./codename.sh)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
    cat /etc/apt/sources.list.d/pgdg.list && \
    rm codename.sh

RUN apt-get update && \
    apt-get install -y ca-certificates \
                       clamav-daemon \
                       less \
                       libreoffice \
                       nodejs \
                       postgresql-client-9.5 \
                       runit && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && rm -fr *Release* *Sources* *Packages* && \
    truncate -s 0 /var/log/*log


# SSH proxy settings
ENV SSH_AUTH_SOCK /tmp/ssh-auth
ENV SSH_AUTH_PROXY_PORT 1234

RUN mkdir -p /usr/src/app
RUN bundle config --global without test:development
WORKDIR /usr/src/app

ONBUILD COPY Gemfile /usr/src/app/
ONBUILD COPY Gemfile.lock /usr/src/app/

# Hack to install private gems
ONBUILD RUN socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork TCP4:$(ip route|awk '/default/ {print $3}'):$SSH_AUTH_PROXY_PORT & bundle install

ONBUILD COPY . /usr/src/app
ONBUILD RUN mkdir -p /usr/src/app/public/assets

CMD ["bundle", "exec"]
